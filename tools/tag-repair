#!/usr/bin/env perl -w

use strict;
use warnings;
use Data::Dumper;
use FindBin qw( $Bin );

BEGIN { $ENV{MT_HOME} or die "MT_HOME environment variable not set ($ENV{MT_HOME})" }

use lib "$Bin/../lib",
        "$Bin/../extlib",
        "$ENV{MT_HOME}/lib",
        "$ENV{MT_HOME}/extlib";

use MT::Log::Log4perl qw(l4mtdump); use Log::Log4perl qw( :resurrect );
###l4p our $logger = MT::Log::Log4perl->new();
# ###l4p $logger ||= MT::Log::Log4perl->new(); $logger->trace();

use MT::TagRepair;

use base qw( MT::Tool );

my $check_tag_dupes = 1;
my $check_self_n8d  = 1;
my $check_bad_n8d   = 1;
my $check_no_n8d    = 1;

my $do_repair = my $dryrun = 0;

sub options {
    (
        'repair' => \$do_repair,
        'dryrun' => \$dryrun,
    )
}

sub main {
    my $class = shift;
    my ($verbose) = $class->SUPER::main(@_) || 0;

    my @issues = qw( tag_dupes self_n8d bad_n8d no_n8d );

    no strict 'refs';
    my $options = {
        issues  => [ grep { ${\"check_$_"} } @issues ],
        verbose => $verbose,
        dryrun  => $dryrun,
    };

    # If the user specified either the repair or dryrun flags, then we
    # are instantiating our repair class, MT::TagRepair::Repair, with
    # the above options.
    # Otherwise, we're instantiating our reporter class, MT::TagRepair::Report.
    my $cmd_class
        = join( '::', 'MT::TagRepair',
                      (( $do_repair || $dryrun ) ? 'Repair' : 'Report') );

    eval "require $cmd_class;";
    
    my $process = $cmd_class->new( $options );
    
    $process->execute();
}

__PACKAGE__->main() unless caller;

1;

